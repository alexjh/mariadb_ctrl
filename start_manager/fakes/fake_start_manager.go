// This file was generated by counterfeiter
package fakes

import (
	"os/exec"
	"sync"

	"github.com/cloudfoundry/mariadb_ctrl/start_manager"
)

type FakeStartManager struct {
	ExecuteStub        func(execMode string) error
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		execMode string
	}
	executeReturns struct {
		result1 error
	}
	GetMysqlCmdStub        func() (*exec.Cmd, error)
	getMysqlCmdMutex       sync.RWMutex
	getMysqlCmdArgsForCall []struct{}
	getMysqlCmdReturns struct {
		result1 *exec.Cmd
		result2 error
	}
	ShutdownStub        func() error
	shutdownMutex       sync.RWMutex
	shutdownArgsForCall []struct{}
	shutdownReturns struct {
		result1 error
	}
}

func (fake *FakeStartManager) Execute(execMode string) error {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		execMode string
	}{execMode})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(execMode)
	} else {
		return fake.executeReturns.result1
	}
}

func (fake *FakeStartManager) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeStartManager) ExecuteArgsForCall(i int) string {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].execMode
}

func (fake *FakeStartManager) ExecuteReturns(result1 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStartManager) GetMysqlCmd() (*exec.Cmd, error) {
	fake.getMysqlCmdMutex.Lock()
	fake.getMysqlCmdArgsForCall = append(fake.getMysqlCmdArgsForCall, struct{}{})
	fake.getMysqlCmdMutex.Unlock()
	if fake.GetMysqlCmdStub != nil {
		return fake.GetMysqlCmdStub()
	} else {
		return fake.getMysqlCmdReturns.result1, fake.getMysqlCmdReturns.result2
	}
}

func (fake *FakeStartManager) GetMysqlCmdCallCount() int {
	fake.getMysqlCmdMutex.RLock()
	defer fake.getMysqlCmdMutex.RUnlock()
	return len(fake.getMysqlCmdArgsForCall)
}

func (fake *FakeStartManager) GetMysqlCmdReturns(result1 *exec.Cmd, result2 error) {
	fake.GetMysqlCmdStub = nil
	fake.getMysqlCmdReturns = struct {
		result1 *exec.Cmd
		result2 error
	}{result1, result2}
}

func (fake *FakeStartManager) Shutdown() error {
	fake.shutdownMutex.Lock()
	fake.shutdownArgsForCall = append(fake.shutdownArgsForCall, struct{}{})
	fake.shutdownMutex.Unlock()
	if fake.ShutdownStub != nil {
		return fake.ShutdownStub()
	} else {
		return fake.shutdownReturns.result1
	}
}

func (fake *FakeStartManager) ShutdownCallCount() int {
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	return len(fake.shutdownArgsForCall)
}

func (fake *FakeStartManager) ShutdownReturns(result1 error) {
	fake.ShutdownStub = nil
	fake.shutdownReturns = struct {
		result1 error
	}{result1}
}

var _ start_manager.StartManager = new(FakeStartManager)
