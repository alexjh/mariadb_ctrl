// This file was generated by counterfeiter
package fakes

import (
	"os/exec"
	"sync"

	"github.com/cloudfoundry/mariadb_ctrl/start_manager/node_prestarter"
)

type FakePreStarter struct {
	PreStartNodeFromStateStub        func(string) (string, error)
	preStartNodeFromStateMutex       sync.RWMutex
	preStartNodeFromStateArgsForCall []struct {
		arg1 string
	}
	preStartNodeFromStateReturns struct {
		result1 string
		result2 error
	}
	GetMysqlCmdStub        func() (*exec.Cmd, error)
	getMysqlCmdMutex       sync.RWMutex
	getMysqlCmdArgsForCall []struct{}
	getMysqlCmdReturns struct {
		result1 *exec.Cmd
		result2 error
	}
}

func (fake *FakePreStarter) PreStartNodeFromState(arg1 string) (string, error) {
	fake.preStartNodeFromStateMutex.Lock()
	fake.preStartNodeFromStateArgsForCall = append(fake.preStartNodeFromStateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.preStartNodeFromStateMutex.Unlock()
	if fake.PreStartNodeFromStateStub != nil {
		return fake.PreStartNodeFromStateStub(arg1)
	} else {
		return fake.preStartNodeFromStateReturns.result1, fake.preStartNodeFromStateReturns.result2
	}
}

func (fake *FakePreStarter) PreStartNodeFromStateCallCount() int {
	fake.preStartNodeFromStateMutex.RLock()
	defer fake.preStartNodeFromStateMutex.RUnlock()
	return len(fake.preStartNodeFromStateArgsForCall)
}

func (fake *FakePreStarter) PreStartNodeFromStateArgsForCall(i int) string {
	fake.preStartNodeFromStateMutex.RLock()
	defer fake.preStartNodeFromStateMutex.RUnlock()
	return fake.preStartNodeFromStateArgsForCall[i].arg1
}

func (fake *FakePreStarter) PreStartNodeFromStateReturns(result1 string, result2 error) {
	fake.PreStartNodeFromStateStub = nil
	fake.preStartNodeFromStateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePreStarter) GetMysqlCmd() (*exec.Cmd, error) {
	fake.getMysqlCmdMutex.Lock()
	fake.getMysqlCmdArgsForCall = append(fake.getMysqlCmdArgsForCall, struct{}{})
	fake.getMysqlCmdMutex.Unlock()
	if fake.GetMysqlCmdStub != nil {
		return fake.GetMysqlCmdStub()
	} else {
		return fake.getMysqlCmdReturns.result1, fake.getMysqlCmdReturns.result2
	}
}

func (fake *FakePreStarter) GetMysqlCmdCallCount() int {
	fake.getMysqlCmdMutex.RLock()
	defer fake.getMysqlCmdMutex.RUnlock()
	return len(fake.getMysqlCmdArgsForCall)
}

func (fake *FakePreStarter) GetMysqlCmdReturns(result1 *exec.Cmd, result2 error) {
	fake.GetMysqlCmdStub = nil
	fake.getMysqlCmdReturns = struct {
		result1 *exec.Cmd
		result2 error
	}{result1, result2}
}

var _ node_prestarter.PreStarter = new(FakePreStarter)
