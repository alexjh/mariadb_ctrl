// This file was generated by counterfeiter
package fakes

import (
	"github.com/cloudfoundry/mariadb_ctrl/upgrader"
	"sync"
)

type FakeUpgrader struct {
	UpgradeStub        func() error
	upgradeMutex       sync.RWMutex
	upgradeArgsForCall []struct{}
	upgradeReturns     struct {
		result1 error
	}
	NeedsUpgradeStub        func() (bool, error)
	needsUpgradeMutex       sync.RWMutex
	needsUpgradeArgsForCall []struct{}
	needsUpgradeReturns     struct {
		result1 bool
		result2 error
	}
}

func (fake *FakeUpgrader) Upgrade() error {
	fake.upgradeMutex.Lock()
	defer fake.upgradeMutex.Unlock()
	fake.upgradeArgsForCall = append(fake.upgradeArgsForCall, struct{}{})
	if fake.UpgradeStub != nil {
		return fake.UpgradeStub()
	} else {
		return fake.upgradeReturns.result1
	}
}

func (fake *FakeUpgrader) UpgradeCallCount() int {
	fake.upgradeMutex.RLock()
	defer fake.upgradeMutex.RUnlock()
	return len(fake.upgradeArgsForCall)
}

func (fake *FakeUpgrader) UpgradeReturns(result1 error) {
	fake.UpgradeStub = nil
	fake.upgradeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpgrader) NeedsUpgrade() (bool, error) {
	fake.needsUpgradeMutex.Lock()
	defer fake.needsUpgradeMutex.Unlock()
	fake.needsUpgradeArgsForCall = append(fake.needsUpgradeArgsForCall, struct{}{})
	if fake.NeedsUpgradeStub != nil {
		return fake.NeedsUpgradeStub()
	} else {
		return fake.needsUpgradeReturns.result1, fake.needsUpgradeReturns.result2
	}
}

func (fake *FakeUpgrader) NeedsUpgradeCallCount() int {
	fake.needsUpgradeMutex.RLock()
	defer fake.needsUpgradeMutex.RUnlock()
	return len(fake.needsUpgradeArgsForCall)
}

func (fake *FakeUpgrader) NeedsUpgradeReturns(result1 bool, result2 error) {
	fake.NeedsUpgradeStub = nil
	fake.needsUpgradeReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

var _ upgrader.Upgrader = new(FakeUpgrader)
